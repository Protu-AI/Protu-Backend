services:
  user-service:
    container_name: user-service-container
    build:
      context: ../user-service
      dockerfile: Dockerfile
    image: protu-ai/user-service:v1.0.0
    ports:
      - "8085:8085"
    env_file:
      - ../user-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - maven-repo:/root/.m2
    networks:
      - protu_network

  chat-service:
    container_name: chat-service-container
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    image: protu-ai/chat-service:v1.0.0
    ports:
      - "8082:8082"
    env_file:
      - ../chat-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/protu-db
    volumes:
      - node_modules:/app/node_modules
    networks:
      - protu_network

  postgres:
    image: postgres:latest
    container_name: postgres-db-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: protu-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - protu_network

volumes:
  node_modules:
  maven-repo:
  postgres-data:
    driver: local

networks:
  protu_network:
    driver: bridge
