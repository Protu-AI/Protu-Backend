name: protu-ai

services:
  user-service:
    container_name: user-service-container
    build:
      context: ../user-service
      dockerfile: Dockerfile
    image: protu-ai/user-service:v1.0.0
    ports:
      - "8085:8085"
    env_file:
      - ../user-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - maven-repo:/root/.m2

  chat-service:
    container_name: chat-service-container
    build:
      context: ../chat-service
      dockerfile: Dockerfile
    image: protu-ai/chat-service:v1.0.0
    ports:
      - "8082:8082"
    env_file:
      - ../chat-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/protu-db
      AI_SERVICE_URL: http://model-service-container:8000
    volumes:
      - node_modules:/app/node_modules
      - attachments:/app/uploads

  postgres:
    image: postgres:latest
    container_name: postgres-db-container
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: protu-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d

  redis:
    image: redis:alpine3.21
    container_name: redis-cache-container
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    command: [ "redis-server" ]
    volumes:
      - redis-data:/data

  gateway:
    container_name: gateway-container
    build:
      context: ../gateway
      dockerfile: Dockerfile
    image: protu-ai/gateway:v1.0.0
    ports:
      - "80:80"
    depends_on:
      service-discovery:
        condition: service_started

  notification-service:
    container_name: notification-service-container
    build:
      context: ../notification-service
      dockerfile: Dockerfile
    image: protu-ai/notification-service:v1.0.0
    ports:
      - "8088:8088"
    env_file:
      - ../notification-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - maven-repo:/root/.m2

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq-container
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/

  #  model-service:
  #    container_name: model-service-container
  #    build:
  #      context: ../../AI
  #      dockerfile: Dockerfile
  #    image: protu-ai/model-service:v1.0.0
  #    ports:
  #      - "8000:8000"
  #    env_file:
  #      - ../../AI/.env
  #    depends_on:
  #      postgres:
  #        condition: service_healthy
  #    environment:
  #      DB_HOST: postgres
  #      DB_PORT: 5432
  #      DB_NAME: protu-db
  #      DB_USER: ${POSTGRES_USER}
  #      DB_PASSWORD: ${POSTGRES_PASSWORD}
  #    volumes:
  #      - model-data:/app/data
  #      - attachments:/app/uploads

  service-discovery:
    container_name: service-discovery-container
    build:
      context: ../service-discovery
      dockerfile: Dockerfile
    image: protu-ai/service-discovery:v1.0.0
    ports:
      - "8761:8761"
    volumes:
      - maven-repo:/root/.m2

  code-execution-service:
    container_name: code-execution-service-container
    build:
      context: ../code-execution-service
      dockerfile: Dockerfile
    image: protu-ai/code-execution-service:v1.0.0
    ports:
      - "8086:8086"
    env_file:
      - ../code-execution-service/.env

  content-service-service:
    container_name: content-service-container
    build:
      context: ../content-service
      dockerfile: Dockerfile
    image: protu-ai/content-service:v1.0.0
    ports:
      - "8087:8087"
    env_file:
      - ../content-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - maven-repo:/root/.m2

  content-service-db:
    image: postgres:latest
    container_name: content-db-container
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: protu-content-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    volumes:
      - postgres-content-data:/var/lib/postgresql/data


volumes:
  node_modules:
  attachments:
  maven-repo:
  postgres-data:
  postgres-content-data:
  redis-data:
  rabbitmq-data:
#  model-data:
